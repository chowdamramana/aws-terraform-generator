from jinja2 import Template
from app.models.config import AWSConfig
import os

def generate_terraform_files(config: AWSConfig) -> dict:
    """
    Generate Terraform files (main.tf, variables.tf, outputs.tf).
    """
    files = {}

    # main.tf
    main_tf = f"""
# Generated by AWS Terraform Generator
provider "aws" {{
  region = "{config.region}"
}}
"""
    for idx, resource in enumerate(config.resources):
        template_path = f"app/templates/terraform/{resource.resource_type}.tf.j2"
        if os.path.exists(template_path):
            with open(template_path, "r") as f:
                template = Template(f.read())
        else:
            template = Template("""
resource "{{ resource_type }}" "resource_{{ idx }}" {
{% for key, value in properties.items() %}
  {{ key }} = "{{ value }}"
{% endfor %}
}
""")
        
        resource_code = template.render(
            resource_type=resource.resource_type,
            idx=idx,
            properties=resource.properties
        )
        main_tf += resource_code + "\n"
    files["main.tf"] = main_tf

    # variables.tf
    variables_tf = """
variable "region" {
  description = "AWS region"
  type        = string
  default     = "{{ config.region }}"
}
""".replace("{{ config.region }}", config.region)
    for resource in config.resources:
        for key, value in resource.properties.items():
            variables_tf += f"""
variable "{resource.resource_type}_{key}" {{
  description = "{key} for {resource.resource_type}"
  type        = string
  default     = "{value}"
}}
"""
    files["variables.tf"] = variables_tf

    # outputs.tf
    outputs_tf = ""
    for idx, resource in enumerate(config.resources):
        outputs_tf += f"""
output "{resource.resource_type}_{idx}_id" {{
  value = {resource.resource_type}.resource_{idx}.id
}}
"""
    files["outputs.tf"] = outputs_tf

    return files